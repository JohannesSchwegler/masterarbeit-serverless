{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ChildLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-childLambda"
      }
    },
    "SaleOrderProcessingActionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-saleOrderProcessingAction"
      }
    },
    "ListMaterialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-listMaterial"
      }
    },
    "CreateMaterialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-createMaterial"
      }
    },
    "ReadMaterialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/readMaterialAction"
      }
    },
    "ListCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-listCustomer"
      }
    },
    "CreateCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-createCustomer"
      }
    },
    "ReadCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-readCustomer"
      }
    },
    "UpdateCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-dev-updateCustomer"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readMaterialAction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readMaterialAction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ListTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:InvokeAsync"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ChildLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/childLambda.zip"
        },
        "Handler": "handler.mainHandler",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-childLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ChildLambdaLogGroup"
      ]
    },
    "SaleOrderProcessingActionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/saleOrderProcessingAction.zip"
        },
        "Handler": "handler.saleOrderProcessingAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-saleOrderProcessingAction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaleOrderProcessingActionLogGroup"
      ]
    },
    "ListMaterialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/listMaterial.zip"
        },
        "Handler": "handler.listMaterialAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-listMaterial",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListMaterialLogGroup"
      ]
    },
    "CreateMaterialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/createMaterial.zip"
        },
        "Handler": "handler.createMaterialAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-createMaterial",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateMaterialLogGroup"
      ]
    },
    "ReadMaterialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/readMaterial.zip"
        },
        "Handler": "handler.readMaterialAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "readMaterialAction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadMaterialLogGroup"
      ]
    },
    "ListCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/listCustomer.zip"
        },
        "Handler": "handler.listCustomerAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-listCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListCustomerLogGroup"
      ]
    },
    "CreateCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/createCustomer.zip"
        },
        "Handler": "handler.createCustomerAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-createCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCustomerLogGroup"
      ]
    },
    "ReadCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/readCustomer.zip"
        },
        "Handler": "handler.readCustomerAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-readCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadCustomerLogGroup"
      ]
    },
    "UpdateCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless/dev/1642701815315-2022-01-20T18:03:35.315Z/updateCustomer.zip"
        },
        "Handler": "handler.updateCustomerAction",
        "Runtime": "nodejs14.x",
        "FunctionName": "serverless-dev-updateCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STAGE": "dev",
            "LIST_TABLE": "LIST_TABLE",
            "FUNCTION_ARN": "arn:aws:lambda::eu-west-1:function:serverless-dev-readMaterial",
            "AWS_REGION": "eu-west-2",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": "",
            "SLS_DEBUG": "*"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCustomerLogGroup"
      ]
    },
    "ChildLambdaLambdaVersion73xTPgDqUfiaNCzfevVv28CITQcV7yqZHaQFrmAtLw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChildLambdaLambdaFunction"
        },
        "CodeSha256": "ETqIA5JOy+AL78YNiJYLjSRbGT+Y7+do/L306Kz+7VI="
      }
    },
    "CreateMaterialLambdaVersionC9aeVP2VKA8eN6shZSYz4ZG1qDVSpkZeeCs2SgtbY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateMaterialLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "SaleOrderProcessingActionLambdaVersionL7Go9EbV4EmfoLcMLjyByUQsreKsFXjikj6CTbc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaleOrderProcessingActionLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "ReadMaterialLambdaVersionbQBJCu8AKQZTpqjv39HY8SXU3QMpYnD7XoKkXCV1NI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadMaterialLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "ListMaterialLambdaVersionyZha8l8xpKdWFvPZYtCj2auJLq91S3FLU3GbOhDcE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListMaterialLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "CreateCustomerLambdaVersionSLtOTrumSYtp3H54YZkM8zhA9rZKpV6jGvk4KCDEPs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCustomerLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "UpdateCustomerLambdaVersionLuaFSjONILpjzElArpnbYAIbqlpNxwpcYwjG6FzXE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCustomerLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "ReadCustomerLambdaVersionSAWPzOUhPhH8LM7qoc0pRuD2HyxTj6A8Z2CQ2cMp0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadCustomerLambdaFunction"
        },
        "CodeSha256": "dL2YPpbXVqKbSbn80TFZonxGqvLPldfjJHNipV/NZDI="
      }
    },
    "ListCustomerLambdaVersionuhbIzFlip1UbvmOdgX8SbncRk7CTmRzcXKsED6Yg2w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListCustomerLambdaFunction"
        },
        "CodeSha256": "ETqIA5JOy+AL78YNiJYLjSRbGT+Y7+do/L306Kz+7VI="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "serverless-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceSaleorderprocessing": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "saleOrderProcessing",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMaterial": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "material",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMaterialIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMaterial"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCustomer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "customer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCustomerIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCustomer"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSaleorderprocessingPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaleorderprocessing"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaleOrderProcessingActionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaleOrderProcessingActionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMaterialGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMaterial"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListMaterialLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListMaterialLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMaterialPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMaterial"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateMaterialLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateMaterialLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMaterialIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMaterialIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadMaterialLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServerlessRequestValidator"
        }
      },
      "DependsOn": [
        "ReadMaterialLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCustomerGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListCustomerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCustomerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateCustomerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCustomerIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomerIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServerlessRequestValidator"
        }
      },
      "DependsOn": [
        "ReadCustomerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCustomerIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomerIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServerlessRequestValidator"
        }
      },
      "DependsOn": [
        "UpdateCustomerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayServerlessRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "serverless-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayDeployment1642701782215": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSaleorderprocessingPost",
        "ApiGatewayMethodMaterialGet",
        "ApiGatewayMethodMaterialPost",
        "ApiGatewayMethodMaterialIdVarGet",
        "ApiGatewayMethodCustomerGet",
        "ApiGatewayMethodCustomerPost",
        "ApiGatewayMethodCustomerIdVarGet",
        "ApiGatewayMethodCustomerIdVarPut"
      ]
    },
    "SaleOrderProcessingActionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaleOrderProcessingActionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListMaterialLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListMaterialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateMaterialLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateMaterialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReadMaterialLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadMaterialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReadCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AccessLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/apigateway/serverless-AccessLogs"
      }
    },
    "ListTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "serverless-list-table-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-serverless-dev-ServerlessDeploymentBucketName"
      }
    },
    "ChildLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChildLambdaLambdaVersion73xTPgDqUfiaNCzfevVv28CITQcV7yqZHaQFrmAtLw"
      },
      "Export": {
        "Name": "sls-serverless-dev-ChildLambdaLambdaFunctionQualifiedArn"
      }
    },
    "CreateMaterialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateMaterialLambdaVersionC9aeVP2VKA8eN6shZSYz4ZG1qDVSpkZeeCs2SgtbY"
      },
      "Export": {
        "Name": "sls-serverless-dev-CreateMaterialLambdaFunctionQualifiedArn"
      }
    },
    "SaleOrderProcessingActionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaleOrderProcessingActionLambdaVersionL7Go9EbV4EmfoLcMLjyByUQsreKsFXjikj6CTbc"
      },
      "Export": {
        "Name": "sls-serverless-dev-SaleOrderProcessingActionLambdaFunctionQualifiedArn"
      }
    },
    "ReadMaterialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadMaterialLambdaVersionbQBJCu8AKQZTpqjv39HY8SXU3QMpYnD7XoKkXCV1NI"
      },
      "Export": {
        "Name": "sls-serverless-dev-ReadMaterialLambdaFunctionQualifiedArn"
      }
    },
    "ListMaterialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListMaterialLambdaVersionyZha8l8xpKdWFvPZYtCj2auJLq91S3FLU3GbOhDcE"
      },
      "Export": {
        "Name": "sls-serverless-dev-ListMaterialLambdaFunctionQualifiedArn"
      }
    },
    "CreateCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCustomerLambdaVersionSLtOTrumSYtp3H54YZkM8zhA9rZKpV6jGvk4KCDEPs"
      },
      "Export": {
        "Name": "sls-serverless-dev-CreateCustomerLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCustomerLambdaVersionLuaFSjONILpjzElArpnbYAIbqlpNxwpcYwjG6FzXE"
      },
      "Export": {
        "Name": "sls-serverless-dev-UpdateCustomerLambdaFunctionQualifiedArn"
      }
    },
    "ReadCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadCustomerLambdaVersionSAWPzOUhPhH8LM7qoc0pRuD2HyxTj6A8Z2CQ2cMp0"
      },
      "Export": {
        "Name": "sls-serverless-dev-ReadCustomerLambdaFunctionQualifiedArn"
      }
    },
    "ListCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListCustomerLambdaVersionuhbIzFlip1UbvmOdgX8SbncRk7CTmRzcXKsED6Yg2w"
      },
      "Export": {
        "Name": "sls-serverless-dev-ListCustomerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-serverless-dev-ServiceEndpoint"
      }
    }
  }
}