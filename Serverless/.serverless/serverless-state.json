{
  "service": {
    "service": "master",
    "serviceObject": {
      "name": "master"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "region": "eu-west-1",
      "apiGateway": {
        "minimumCompressionSize": 1024,
        "shouldStartNameWithService": true
      },
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "STAGE": "dev",
        "LIST_TABLE": "LIST_TABLE",
        "snsArn": {
          "Ref": "SNSTopic"
        },
        "REGION": "eu-west-1",
        "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
        "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
        "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
        "DYNAMODB_LOCAL_STAGE": "dev",
        "IS_OFFLINE": "false",
        "JWKS_URI": "",
        "AUDIENCE": "",
        "TOKEN_ISSUER": "",
        "TOKEN": "",
        "SLS_DEBUG": "*"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:eu-west-1:*:table/LIST_TABLE"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish",
            "sns:CreateTopic"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId"
                },
                ":master-dev-testtopic"
              ]
            ]
          }
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ResetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-reset"
            }
          },
          "SaleOrderProcessingActionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-saleOrderProcessingAction"
            }
          },
          "AvailabilityCheckLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-availabilityCheck"
            }
          },
          "ListSaleOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-listSaleOrder"
            }
          },
          "ListMaterialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-listMaterial"
            }
          },
          "CreateMaterialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-createMaterial"
            }
          },
          "ReadMaterialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/readMaterialAction"
            }
          },
          "ListCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-listCustomer"
            }
          },
          "CreateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-createCustomer"
            }
          },
          "ReadCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-readCustomer"
            }
          },
          "UpdateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-updateCustomer"
            }
          },
          "CreateCustomerInvoiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-createCustomerInvoice"
            }
          },
          "ListAccountingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-listAccounting"
            }
          },
          "CreateAccountingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-createAccounting"
            }
          },
          "ReadAccountingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-readAccounting"
            }
          },
          "UpdateAccountingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/master-dev-updateAccounting"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "master",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readMaterialAction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/master-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readMaterialAction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/master-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "master",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ResetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/reset.zip"
              },
              "Handler": "handler.restoreDefaultDataAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-reset",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResetLogGroup"
            ]
          },
          "SaleOrderProcessingActionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/saleOrderProcessingAction.zip"
              },
              "Handler": "handler.saleOrderProcessingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-saleOrderProcessingAction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaleOrderProcessingActionLogGroup"
            ]
          },
          "AvailabilityCheckLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/availabilityCheck.zip"
              },
              "Handler": "handler.availabilityCheckAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-availabilityCheck",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AvailabilityCheckLogGroup"
            ]
          },
          "ListSaleOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/listSaleOrder.zip"
              },
              "Handler": "handler.listSaleOrderAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-listSaleOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListSaleOrderLogGroup"
            ]
          },
          "ListMaterialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/listMaterial.zip"
              },
              "Handler": "handler.listMaterialAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-listMaterial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListMaterialLogGroup"
            ]
          },
          "CreateMaterialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/createMaterial.zip"
              },
              "Handler": "handler.createMaterialAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-createMaterial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateMaterialLogGroup"
            ]
          },
          "ReadMaterialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/readMaterial.zip"
              },
              "Handler": "handler.readMaterialAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "readMaterialAction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadMaterialLogGroup"
            ]
          },
          "ListCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/listCustomer.zip"
              },
              "Handler": "handler.listCustomerAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-listCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListCustomerLogGroup"
            ]
          },
          "CreateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/createCustomer.zip"
              },
              "Handler": "handler.createCustomerAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-createCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCustomerLogGroup"
            ]
          },
          "ReadCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/readCustomer.zip"
              },
              "Handler": "handler.readCustomerAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-readCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadCustomerLogGroup"
            ]
          },
          "UpdateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/updateCustomer.zip"
              },
              "Handler": "handler.updateCustomerAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-updateCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCustomerLogGroup"
            ]
          },
          "CreateCustomerInvoiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/createCustomerInvoice.zip"
              },
              "Handler": "handler.customerInvoiceProcessingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-createCustomerInvoice",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCustomerInvoiceLogGroup"
            ]
          },
          "ListAccountingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/listAccounting.zip"
              },
              "Handler": "handler.listAccountingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-listAccounting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListAccountingLogGroup"
            ]
          },
          "CreateAccountingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/createAccounting.zip"
              },
              "Handler": "handler.createAccountingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-createAccounting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAccountingLogGroup"
            ]
          },
          "ReadAccountingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/readAccounting.zip"
              },
              "Handler": "handler.readAccountingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-readAccounting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadAccountingLogGroup"
            ]
          },
          "UpdateAccountingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z/updateAccounting.zip"
              },
              "Handler": "handler.updateAccountingAction",
              "Runtime": "nodejs14.x",
              "FunctionName": "master-dev-updateAccounting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "LIST_TABLE": "LIST_TABLE",
                  "snsArn": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"snsArn\"]"
                  },
                  "REGION": "eu-west-1",
                  "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8008",
                  "DYNAMODB_LOCAL_ACCESS_KEY_ID": "nfy73s",
                  "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "7g3zsb",
                  "DYNAMODB_LOCAL_STAGE": "dev",
                  "IS_OFFLINE": "false",
                  "JWKS_URI": "",
                  "AUDIENCE": "",
                  "TOKEN_ISSUER": "",
                  "TOKEN": "",
                  "SLS_DEBUG": "*"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateAccountingLogGroup"
            ]
          },
          "ResetLambdaVersionbnmTl16ppyZkSNFYTVR2QfUR5lQydojyidosiV1zbk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResetLambdaFunction"
              },
              "CodeSha256": "D5Ob0kttGfxDPVZmpEi9hebqHhgUrJWH5r53uBmzoEE="
            }
          },
          "SaleOrderProcessingActionLambdaVersioncw51DyOzu3lXWo5fBx9md2QJ27Q1tJhxMixAXZGqM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaleOrderProcessingActionLambdaFunction"
              },
              "CodeSha256": "en66TY13JD1xf27Z4umdd2/UxMfXVK+bJbxr0buBT1Y="
            }
          },
          "ListMaterialLambdaVersionDEnhXP6avmcAqARfDKORX1BOxqwvnX82jJ8g0x0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListMaterialLambdaFunction"
              },
              "CodeSha256": "Uyr/vHAq0bEzgCgXIpa9RAG8KFD23cVxXj3qjXK0LyQ="
            }
          },
          "AvailabilityCheckLambdaVersionZRntAOv1InhOP0bCY5IfJ1cVL0GgPW0tryjuibLcfU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AvailabilityCheckLambdaFunction"
              },
              "CodeSha256": "jB7R+K9cqBYq2+IeG08oARFBe7AyWRlhuc5vzQyEkRk="
            }
          },
          "ListCustomerLambdaVersionfnDnTDEpzZIxRLc0isEPZHrFUzL1dUUR1ChzMVsbP3g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListCustomerLambdaFunction"
              },
              "CodeSha256": "D5Ob0kttGfxDPVZmpEi9hebqHhgUrJWH5r53uBmzoEE="
            }
          },
          "CreateMaterialLambdaVersionk9bM24lNQXDbruTlCEB6cAmPZbB5B3akJl7kVSJXo1w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateMaterialLambdaFunction"
              },
              "CodeSha256": "ElKPCpr1tDx1QS3cb3Z5sdgo/kOO24pY3mC57ZnTlnY="
            }
          },
          "ReadMaterialLambdaVersionV50gZ4HAeeqSN9UzmNQC5DNrzNyo0bGql2SzsqTac": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadMaterialLambdaFunction"
              },
              "CodeSha256": "FY4SiOW/l+5lUREKv8XFrGfJZJhyT0NQ4/jkYAKMUz8="
            }
          },
          "CreateCustomerLambdaVersion51sExz0215o3a6JxDM9SctZMjVuOa8wS0OdHgSLDjE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCustomerLambdaFunction"
              },
              "CodeSha256": "en66TY13JD1xf27Z4umdd2/UxMfXVK+bJbxr0buBT1Y="
            }
          },
          "ReadCustomerLambdaVersionq7ym5WKecrtHwE3OacZWrX9li65OtJifdUjgyKbLQW4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadCustomerLambdaFunction"
              },
              "CodeSha256": "3/nOjJTXM4Zu8IsRLSkSU9a0HBJwWJzm5bK7tMb3jyM="
            }
          },
          "ListSaleOrderLambdaVersion4he3NWnD2GzJdQVv6NdgRqGp9aB3kExPstGKOV1hQY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListSaleOrderLambdaFunction"
              },
              "CodeSha256": "D5Ob0kttGfxDPVZmpEi9hebqHhgUrJWH5r53uBmzoEE="
            }
          },
          "ListAccountingLambdaVersion4xur0rM7pExsJlAwlvX1wqjc6of1kJWZTR24H5WMo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListAccountingLambdaFunction"
              },
              "CodeSha256": "QqmRAr/cBH9oxJW75MIwz3AF2/gzxzFRsIKDaOqY8j4="
            }
          },
          "CreateCustomerInvoiceLambdaVersionbeKmrvozH2ciwmtNBxoXN48Q4ZVL6DMqf8dXEVfzSJY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCustomerInvoiceLambdaFunction"
              },
              "CodeSha256": "D5Ob0kttGfxDPVZmpEi9hebqHhgUrJWH5r53uBmzoEE="
            }
          },
          "CreateAccountingLambdaVersionj1h1Xik9zHKuB9Flfznu3ebOmGigGiO1KgqVxbqBo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAccountingLambdaFunction"
              },
              "CodeSha256": "QqmRAr/cBH9oxJW75MIwz3AF2/gzxzFRsIKDaOqY8j4="
            }
          },
          "UpdateCustomerLambdaVersionJddASRrJd2EgybHdRrajlYEA6LGnJKQdwLRnYgLsLc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCustomerLambdaFunction"
              },
              "CodeSha256": "D5Ob0kttGfxDPVZmpEi9hebqHhgUrJWH5r53uBmzoEE="
            }
          },
          "ReadAccountingLambdaVersionkp5CoPwff9mct7S2nvod4327VAZgxPXCq3ghTOFA4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadAccountingLambdaFunction"
              },
              "CodeSha256": "+Ir8JrM4z+FFuUiXYScOovsce88O2JwKyZl0ayu/Bmw="
            }
          },
          "UpdateAccountingLambdaVersionCxZznRsbZylelCeeo8zulpjp7NL0pwzZI2NBYiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAccountingLambdaFunction"
              },
              "CodeSha256": "QqmRAr/cBH9oxJW75MIwz3AF2/gzxzFRsIKDaOqY8j4="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "master-dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceReset": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "reset",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSaleorderprocessing": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "saleOrderProcessing",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAvailabilitycheck": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "availabilityCheck",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSaleorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "saleorder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMaterial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "material",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMaterialIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMaterial"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "customer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomerIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCustomer"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccounting": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "accounting",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccountingIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAccounting"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResetPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReset"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResetLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSaleorderprocessingPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaleorderprocessing"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaleOrderProcessingActionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaleOrderProcessingActionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAvailabilitycheckPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAvailabilitycheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AvailabilityCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AvailabilityCheckLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSaleorderGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaleorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListSaleOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListSaleOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMaterialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMaterial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListMaterialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListMaterialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMaterialPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMaterial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateMaterialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateMaterialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMaterialIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMaterialIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReadMaterialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ReadMaterialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomerGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomerIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomerIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReadCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ReadCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomerIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomerIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountingGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccounting"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListAccountingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListAccountingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountingPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccounting"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAccountingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateAccountingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountingIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountingIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReadAccountingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ReadAccountingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountingIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountingIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateAccountingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateAccountingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1643397019071": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodResetPost",
              "ApiGatewayMethodSaleorderprocessingPost",
              "ApiGatewayMethodAvailabilitycheckPost",
              "ApiGatewayMethodSaleorderGet",
              "ApiGatewayMethodMaterialGet",
              "ApiGatewayMethodMaterialPost",
              "ApiGatewayMethodMaterialIdVarGet",
              "ApiGatewayMethodCustomerGet",
              "ApiGatewayMethodCustomerPost",
              "ApiGatewayMethodCustomerIdVarGet",
              "ApiGatewayMethodCustomerIdVarPut",
              "ApiGatewayMethodAccountingGet",
              "ApiGatewayMethodAccountingPost",
              "ApiGatewayMethodAccountingIdVarGet",
              "ApiGatewayMethodAccountingIdVarPut"
            ]
          },
          "ResetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaleOrderProcessingActionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaleOrderProcessingActionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AvailabilityCheckLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AvailabilityCheckLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListSaleOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListSaleOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListMaterialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListMaterialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateMaterialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateMaterialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReadMaterialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadMaterialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReadCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListAccountingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListAccountingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateAccountingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAccountingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReadAccountingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadAccountingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateAccountingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateAccountingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SNSTopicCreatecustomerinvoice": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "create-customer-invoice",
              "Subscription": [
                {
                  "Endpoint": {
                    "Fn::GetAtt": [
                      "CreateCustomerInvoiceLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Protocol": "lambda"
                }
              ]
            }
          },
          "CreateCustomerInvoiceLambdaPermissionCreatecustomerinvoiceSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCustomerInvoiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    "create-customer-invoice"
                  ]
                ]
              }
            }
          },
          "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "DisplayName": "SNS Topic",
              "TopicName": "master-dev-testtopic"
            }
          },
          "ListTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "LIST_TABLE",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-master-dev-ServerlessDeploymentBucketName"
            }
          },
          "ResetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResetLambdaVersionbnmTl16ppyZkSNFYTVR2QfUR5lQydojyidosiV1zbk"
            },
            "Export": {
              "Name": "sls-master-dev-ResetLambdaFunctionQualifiedArn"
            }
          },
          "SaleOrderProcessingActionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaleOrderProcessingActionLambdaVersioncw51DyOzu3lXWo5fBx9md2QJ27Q1tJhxMixAXZGqM"
            },
            "Export": {
              "Name": "sls-master-dev-SaleOrderProcessingActionLambdaFunctionQualifiedArn"
            }
          },
          "ListMaterialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListMaterialLambdaVersionDEnhXP6avmcAqARfDKORX1BOxqwvnX82jJ8g0x0"
            },
            "Export": {
              "Name": "sls-master-dev-ListMaterialLambdaFunctionQualifiedArn"
            }
          },
          "AvailabilityCheckLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AvailabilityCheckLambdaVersionZRntAOv1InhOP0bCY5IfJ1cVL0GgPW0tryjuibLcfU"
            },
            "Export": {
              "Name": "sls-master-dev-AvailabilityCheckLambdaFunctionQualifiedArn"
            }
          },
          "ListCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListCustomerLambdaVersionfnDnTDEpzZIxRLc0isEPZHrFUzL1dUUR1ChzMVsbP3g"
            },
            "Export": {
              "Name": "sls-master-dev-ListCustomerLambdaFunctionQualifiedArn"
            }
          },
          "CreateMaterialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateMaterialLambdaVersionk9bM24lNQXDbruTlCEB6cAmPZbB5B3akJl7kVSJXo1w"
            },
            "Export": {
              "Name": "sls-master-dev-CreateMaterialLambdaFunctionQualifiedArn"
            }
          },
          "ReadMaterialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadMaterialLambdaVersionV50gZ4HAeeqSN9UzmNQC5DNrzNyo0bGql2SzsqTac"
            },
            "Export": {
              "Name": "sls-master-dev-ReadMaterialLambdaFunctionQualifiedArn"
            }
          },
          "CreateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCustomerLambdaVersion51sExz0215o3a6JxDM9SctZMjVuOa8wS0OdHgSLDjE"
            },
            "Export": {
              "Name": "sls-master-dev-CreateCustomerLambdaFunctionQualifiedArn"
            }
          },
          "ReadCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadCustomerLambdaVersionq7ym5WKecrtHwE3OacZWrX9li65OtJifdUjgyKbLQW4"
            },
            "Export": {
              "Name": "sls-master-dev-ReadCustomerLambdaFunctionQualifiedArn"
            }
          },
          "ListSaleOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListSaleOrderLambdaVersion4he3NWnD2GzJdQVv6NdgRqGp9aB3kExPstGKOV1hQY"
            },
            "Export": {
              "Name": "sls-master-dev-ListSaleOrderLambdaFunctionQualifiedArn"
            }
          },
          "ListAccountingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListAccountingLambdaVersion4xur0rM7pExsJlAwlvX1wqjc6of1kJWZTR24H5WMo"
            },
            "Export": {
              "Name": "sls-master-dev-ListAccountingLambdaFunctionQualifiedArn"
            }
          },
          "CreateCustomerInvoiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCustomerInvoiceLambdaVersionbeKmrvozH2ciwmtNBxoXN48Q4ZVL6DMqf8dXEVfzSJY"
            },
            "Export": {
              "Name": "sls-master-dev-CreateCustomerInvoiceLambdaFunctionQualifiedArn"
            }
          },
          "CreateAccountingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAccountingLambdaVersionj1h1Xik9zHKuB9Flfznu3ebOmGigGiO1KgqVxbqBo"
            },
            "Export": {
              "Name": "sls-master-dev-CreateAccountingLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCustomerLambdaVersionJddASRrJd2EgybHdRrajlYEA6LGnJKQdwLRnYgLsLc"
            },
            "Export": {
              "Name": "sls-master-dev-UpdateCustomerLambdaFunctionQualifiedArn"
            }
          },
          "ReadAccountingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadAccountingLambdaVersionkp5CoPwff9mct7S2nvod4327VAZgxPXCq3ghTOFA4"
            },
            "Export": {
              "Name": "sls-master-dev-ReadAccountingLambdaFunctionQualifiedArn"
            }
          },
          "UpdateAccountingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAccountingLambdaVersionCxZznRsbZylelCeeo8zulpjp7NL0pwzZI2NBYiA"
            },
            "Export": {
              "Name": "sls-master-dev-UpdateAccountingLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-master-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serviceName": "master",
      "stage": "dev",
      "bucket": "master",
      "defaultStage": "dev",
      "stages": [
        null,
        "dev",
        "integration",
        "production"
      ],
      "region": "eu-west-1",
      "list_table": "master-list-table-dev",
      "tasks_table": "master-tasks-table-dev",
      "lambda_prefix": "masterarbeit",
      "table_throughputs": {
        "prod": 5,
        "default": 5
      },
      "table_throughput": 5,
      "dynamodb": {
        "stages": [
          "dev"
        ],
        "start": {
          "port": 8008,
          "inMemory": true,
          "heapInitial": "200m",
          "heapMax": "1g",
          "migrate": true,
          "seed": true,
          "convertEmptyValues": true,
          "// noStart": true
        }
      },
      "serverless-offline": {
        "httpPort": 3000,
        "babelOptions": {
          "presets": "env"
        }
      },
      "serverless-offline-sns": {
        "port": 4002,
        "debug": true
      },
      "webpack": {
        "packager": "npm",
        "packagerOptions": {},
        "webpackConfig": "node_modules\\serverless-bundle/src/webpack.config.js",
        "includeModules": {
          "forceExclude": [
            "aws-sdk"
          ],
          "forceInclude": null,
          "packagePath": "package.json"
        },
        "excludeFiles": null,
        "excludeRegex": {},
        "keepOutputDirectory": false
      }
    },
    "plugins": [
      "serverless-offline",
      "serverless-bundle",
      "serverless-dotenv-plugin",
      "serverless-dynamodb-local",
      "serverless-offline-sns"
    ],
    "pluginsData": {},
    "functions": {
      "reset": {
        "handler": "handler.restoreDefaultDataAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "reset",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-reset",
        "package": {
          "artifact": ".serverless\\reset.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ResetLambdaVersionbnmTl16ppyZkSNFYTVR2QfUR5lQydojyidosiV1zbk"
      },
      "saleOrderProcessingAction": {
        "handler": "handler.saleOrderProcessingAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "saleOrderProcessing",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-saleOrderProcessingAction",
        "package": {
          "artifact": ".serverless\\saleOrderProcessingAction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SaleOrderProcessingActionLambdaVersioncw51DyOzu3lXWo5fBx9md2QJ27Q1tJhxMixAXZGqM"
      },
      "availabilityCheck": {
        "handler": "handler.availabilityCheckAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "availabilityCheck",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-availabilityCheck",
        "package": {
          "artifact": ".serverless\\availabilityCheck.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AvailabilityCheckLambdaVersionZRntAOv1InhOP0bCY5IfJ1cVL0GgPW0tryjuibLcfU"
      },
      "listSaleOrder": {
        "handler": "handler.listSaleOrderAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "saleorder",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-listSaleOrder",
        "package": {
          "artifact": ".serverless\\listSaleOrder.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListSaleOrderLambdaVersion4he3NWnD2GzJdQVv6NdgRqGp9aB3kExPstGKOV1hQY"
      },
      "listMaterial": {
        "handler": "handler.listMaterialAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "material",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-listMaterial",
        "package": {
          "artifact": ".serverless\\listMaterial.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListMaterialLambdaVersionDEnhXP6avmcAqARfDKORX1BOxqwvnX82jJ8g0x0"
      },
      "createMaterial": {
        "handler": "handler.createMaterialAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "material",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-createMaterial",
        "package": {
          "artifact": ".serverless\\createMaterial.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateMaterialLambdaVersionk9bM24lNQXDbruTlCEB6cAmPZbB5B3akJl7kVSJXo1w"
      },
      "readMaterial": {
        "name": "readMaterialAction",
        "handler": "handler.readMaterialAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "material/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\readMaterial.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadMaterialLambdaVersionV50gZ4HAeeqSN9UzmNQC5DNrzNyo0bGql2SzsqTac"
      },
      "listCustomer": {
        "handler": "handler.listCustomerAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "customer",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-listCustomer",
        "package": {
          "artifact": ".serverless\\listCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListCustomerLambdaVersionfnDnTDEpzZIxRLc0isEPZHrFUzL1dUUR1ChzMVsbP3g"
      },
      "createCustomer": {
        "handler": "handler.createCustomerAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "customer",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-createCustomer",
        "package": {
          "artifact": ".serverless\\createCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateCustomerLambdaVersion51sExz0215o3a6JxDM9SctZMjVuOa8wS0OdHgSLDjE"
      },
      "readCustomer": {
        "handler": "handler.readCustomerAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "customer/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-readCustomer",
        "package": {
          "artifact": ".serverless\\readCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadCustomerLambdaVersionq7ym5WKecrtHwE3OacZWrX9li65OtJifdUjgyKbLQW4"
      },
      "updateCustomer": {
        "handler": "handler.updateCustomerAction",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "customer/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-updateCustomer",
        "package": {
          "artifact": ".serverless\\updateCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateCustomerLambdaVersionJddASRrJd2EgybHdRrajlYEA6LGnJKQdwLRnYgLsLc"
      },
      "createCustomerInvoice": {
        "handler": "handler.customerInvoiceProcessingAction",
        "events": [
          {
            "sns": "create-customer-invoice"
          }
        ],
        "name": "master-dev-createCustomerInvoice",
        "package": {
          "artifact": ".serverless\\createCustomerInvoice.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateCustomerInvoiceLambdaVersionbeKmrvozH2ciwmtNBxoXN48Q4ZVL6DMqf8dXEVfzSJY"
      },
      "listAccounting": {
        "handler": "handler.listAccountingAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "accounting",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-listAccounting",
        "package": {
          "artifact": ".serverless\\listAccounting.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListAccountingLambdaVersion4xur0rM7pExsJlAwlvX1wqjc6of1kJWZTR24H5WMo"
      },
      "createAccounting": {
        "handler": "handler.createAccountingAction",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "accounting",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-createAccounting",
        "package": {
          "artifact": ".serverless\\createAccounting.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateAccountingLambdaVersionj1h1Xik9zHKuB9Flfznu3ebOmGigGiO1KgqVxbqBo"
      },
      "readAccounting": {
        "handler": "handler.readAccountingAction",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "accounting/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-readAccounting",
        "package": {
          "artifact": ".serverless\\readAccounting.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadAccountingLambdaVersionkp5CoPwff9mct7S2nvod4327VAZgxPXCq3ghTOFA4"
      },
      "updateAccounting": {
        "handler": "handler.updateAccountingAction",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "accounting/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "master-dev-updateAccounting",
        "package": {
          "artifact": ".serverless\\updateAccounting.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateAccountingLambdaVersionCxZznRsbZylelCeeo8zulpjp7NL0pwzZI2NBYiA"
      }
    },
    "resources": {
      "Resources": {
        "SNSTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "DisplayName": "SNS Topic",
            "TopicName": "master-dev-testtopic"
          }
        },
        "ListTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "LIST_TABLE",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "useDotenv": true,
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "individually": true,
        "exclude": [
          "layer/**",
          "node_modules/**",
          "!node_modules/babel-runtime/**",
          "!node_modules/sharp/**"
        ],
        "artifactDirectoryName": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/master/dev/1643397080008-2022-01-28T19:11:20.008Z",
    "artifact": ""
  }
}